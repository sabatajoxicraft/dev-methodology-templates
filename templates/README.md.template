# ${PROJECT_NAME}

A well-structured project built with the portable development methodology.

## 🎯 Quick Start

```bash
# Install dependencies (adjust for your stack)
# For Node.js: npm install
# For Python: pip install -r requirements.txt
# For Go: go mod download
# For Rust: cargo build

# Start development (adjust for your stack)
# [Add your start command here]

# Run tests (adjust for your stack)
# [Add your test command here]

# Build for production (adjust for your stack)
# [Add your build command here]
```

## 📁 Project Structure

```
${PROJECT_NAME}/
├── docs/                    # 📚 Project documentation
│   ├── architecture.md     # System architecture
│   ├── style-guide.md      # Coding standards
│   └── api-conventions.md  # API design patterns
├── src/
│   ├── features/           # 🧩 Feature-based organization
│   │   └── [feature-name]/
│   │       ├── core/       # Core business logic
│   │       ├── models/     # Data models/schemas
│   │       ├── services/   # External integrations
│   │       └── tests/      # Feature tests
│   ├── shared/             # 🔄 Shared utilities
│   │   ├── utils/          # Utility functions
│   │   ├── models/         # Common data models
│   │   └── services/       # Shared services
│   └── config/             # 🔧 Configuration
├── tests/                  # 🧪 Test suite
├── scripts/                # 🚀 Automation scripts
├── project_memory.md       # 📝 Project context and decisions
└── .methodology/           # 🛠️ Development methodology
```

## 🛠️ Development Workflow

### Creating Features
```bash
# Create a new feature
./scripts/create-feature user-authentication

# Create a module within a feature
./scripts/create-component AuthService user-authentication
```

### Module Development Process
1. **Define data models** - Create schemas, interfaces, or data structures
2. **Implement core logic** - Build the main functionality
3. **Add external integrations** - APIs, databases, third-party services
4. **Create user interface** - If applicable to your project type
5. **Write comprehensive tests** - Unit, integration, and end-to-end tests
6. **Document thoroughly** - Code comments and usage examples

### Code Organization Principles
- **Feature-based structure**: Related functionality grouped together
- **Single responsibility**: Each module/function does one thing well
- **Separation of concerns**: Clear boundaries between different aspects
- **Test coverage**: Comprehensive testing at all levels

## 🧪 Testing Strategy

- **Unit Tests**: Test individual functions and modules
- **Integration Tests**: Test feature workflows and interactions
- **End-to-End Tests**: Test complete user journeys (if applicable)

```bash
# Run tests (adjust for your stack)
# [Add your test commands here]
```

## 📚 Documentation

- **Project Memory**: `project_memory.md` - Current state and context
- **Architecture**: `docs/architecture.md` - System design decisions
- **Style Guide**: `docs/style-guide.md` - Coding conventions
- **API Conventions**: `docs/api-conventions.md` - API design patterns

## 🔧 Available Scripts

| Script | Description |
|--------|-------------|
| `./scripts/create-feature` | Create new feature structure |
| `./scripts/create-component` | Create new module/component |
| `./scripts/update-memory` | Update project memory |
| `./scripts/status` | Show project status |

## 🚀 Deployment

### Development Environment
```bash
# Start development environment
# [Add your development commands here]
```

### Production Deployment
```bash
# Build and deploy
# [Add your deployment commands here]
```

### Environment Configuration
Configure your environment variables and settings:
```bash
# Copy example configuration
cp .env.example .env

# Edit configuration
# [Add environment-specific instructions]
```

## 🤝 Contributing

1. **Check project memory**: Review `project_memory.md` for current context
2. **Follow style guide**: Adhere to conventions in `docs/style-guide.md`
3. **Write tests**: Ensure new code has appropriate test coverage
4. **Update documentation**: Keep docs current with changes
5. **Update memory**: Record significant changes in project memory

### Git Workflow
```bash
# Create feature branch
git checkout -b feature/new-feature

# Make changes and commit
git add .
git commit -m "feat(feature): add new functionality"

# Update project memory
./scripts/update-memory "Completed new feature implementation"

# Push and create PR
git push origin feature/new-feature
```

## 📊 Project Status

**Current Phase**: [Check project_memory.md]  
**Last Updated**: [Date from project_memory.md]  
**Technology Stack**: [Listed in project_memory.md]

## 📞 Support

- **Documentation**: Check `docs/` folder for detailed information
- **Issues**: Use issue tracker for bug reports and feature requests
- **Questions**: Refer to project memory for context and decisions

## 📝 License

This project is licensed under the [LICENSE](LICENSE) file for details.

---

**Built with the Portable Development Methodology** 🎯  
*Consistent, documented, and maintainable development across any technology stack and environment.*